/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

import java.awt.Graphics;
import java.awt.image.BufferedImage;

/**
 *
 * @author ltonietto
 */
public class ImagePanel extends javax.swing.JPanel {
   
   private BufferedImage image;

   /**
    * Creates new form ImagePanel
    */
   public ImagePanel() {
      int w = Math.max(128, this.getWidth());
      int h = Math.max(128, this.getHeight());
      setSize(w, h);
      setMinimumSize(getSize());
      setPreferredSize(getSize());
      initComponents();
      image = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);
      for (int y = 0; y < h; y++) {
	 for (int x = 0; x < w; x++) {
	    image.setRGB(x, y, 255);
	 }
      }
   }

   /**
    * This method is called from within the constructor to initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is always
    * regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents() {

      setMinimumSize(new java.awt.Dimension(128, 128));
      setLayout(null);
   }// </editor-fold>//GEN-END:initComponents
   // Variables declaration - do not modify//GEN-BEGIN:variables
   // End of variables declaration//GEN-END:variables

   
   
   public BufferedImage getImage(){
      return image;
   }
   
   public void setImage(BufferedImage image){
      this.image = image;
      repaint();
   }
   
   
   /**
    * Atualiza objeto de imagem do componente a partir do um array de pixels.<br/>
    * Uma imagem é uma matriz de inteiros, representada por um vetor (array)
    * unidimensional, cuja comprimento total é: <code>width * height</code>.<br/>
    * Portanto, para acessar um elemento da coluna <code>x</code> e linha 
    * <code>y</code>, deve ser utilizada a fórmula: <code>pixels[x + y * width]</code>
    * <br/>
    * Cada pixel é um ponto colorido da imagem e armazena uma cor "empacotada" 
    * num inteiro, sendo que a configuração padrão deve ser: 
    * <ul>
    * <li>bits [0 a 8) reservados para o valor do canal B (blue) </li>
    * <li>bits [8 a 16) reservados para o valor do canal G (green)</li>
    * <li>bits [16 a 24) reservados para o valor do canal R (red)</li>
    * </ul>
    * 
    * @param pixels array com todos os pontos da imagem.
    * @param width largura da imagem
    * @param height altura da imagem
    */
   public void update(int pixels[], int width, int height){
      image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
      image.setRGB(0, 0, width, height, pixels, 0, width);
      invalidate();
   }

   @Override
   public void paint(Graphics g) {
      super.paint(g); //To change body of generated methods, choose Tools | Templates.
      if(image != null){
	 g.drawImage(image, 0, 0, this);
      }
   }
	  
   
   
}
